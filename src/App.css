
/* Add this to your main CSS file or App.css */

/* Assuming your navbar height is around 60-80px */
body {
  padding-top: 80px; /* Adjust this value to match your navbar height */
}

/* If your navbar has variable height, use this instead: */
body {
  padding-top: var(--navbar-height, 80px);
}

/* Define the navbar height variable */
:root {
  --navbar-height: 80px; /* Set this to your actual navbar height */
}

/* ================================= */
/* Solution 2: Main Content Container Margin */
/* Add this class to your main content wrapper */

.main-content {
  margin-top: 80px; /* Adjust to your navbar height */
  min-height: calc(100vh - 80px); /* Full height minus navbar */
}

/* For React Router pages */
.page-container {
  margin-top: 80px;
  padding: 20px;
  min-height: calc(100vh - 80px);
}

/* ================================= */
/* Solution 3: Specific Page Containers */
/* Apply to individual page components */

.home-page,
.login-page,
.register-page {
  margin-top: 80px; /* Adjust to navbar height */
  padding: 20px;
  min-height: calc(100vh - 80px);
}

/* ================================= */
/* Solution 4: Using CSS Grid Layout */
/* For a more structured approach */

.app-layout {
  display: grid;
  grid-template-rows: auto 1fr auto; /* navbar, main content, footer */
  min-height: 100vh;
}

.navbar {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
  height: 80px; /* Your navbar height */
}

.main-content-grid {
  margin-top: 80px; /* Same as navbar height */
  padding: 20px;
}

/* ================================= */
/* Solution 5: Flexbox Layout */
/* Alternative structured approach */

.app-container {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.navbar-flex {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
  height: 80px;
}

.content-flex {
  flex: 1;
  margin-top: 80px;
  padding: 20px;
}

/* ================================= */
/* Solution 6: Dynamic Height Calculation with JavaScript */
/* Use this CSS class and add JavaScript to calculate height */

.dynamic-top-spacing {
  margin-top: var(--calculated-navbar-height);
  padding: 20px;
}

/* JavaScript to calculate and set the height:
const navbar = document.querySelector('.navbar');
const navbarHeight = navbar.offsetHeight;
document.documentElement.style.setProperty('--calculated-navbar-height', navbarHeight + 'px');
*/

/* ================================= */
/* Solution 7: Responsive Navbar Heights */
/* Handle different navbar heights on different screen sizes */

.responsive-content {
  margin-top: 60px; /* Mobile navbar height */
  padding: 20px;
}

@media (min-width: 768px) {
  .responsive-content {
    margin-top: 80px; /* Desktop navbar height */
  }
}

@media (min-width: 1024px) {
  .responsive-content {
    margin-top: 90px; /* Large screen navbar height */
  }
}

/* ================================= */
/* Solution 8: Scroll Padding for Smooth Navigation */
/* Useful when you have anchor links that scroll to sections */

html {
  scroll-padding-top: 80px; /* Adjust to navbar height */
}

/* ================================= */
/* Complete Example: Professional Page Layout */

/* Reset and base styles */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: 'Inter', sans-serif;
  line-height: 1.6;
  color: #333;
}

/* Navigation bar (assumed to be fixed) */
.navbar {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  height: 80px;
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  border-bottom: 1px solid #e5e7eb;
  z-index: 1000;
  display: flex;
  align-items: center;
  padding: 0 20px;
}

/* Main application container */
.app {
  min-height: 100vh;
}

/* Page wrapper that accounts for navbar */
.page-wrapper {
  margin-top: 80px; /* Same as navbar height */
  min-height: calc(100vh - 80px);
  padding: 0;
}

/* Individual page containers */
.home-container,
.login-container,
.register-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 40px 20px;
}

/* Specific styling for auth pages */
.auth-page {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: calc(100vh - 80px);
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.auth-container {
  background: white;
  padding: 40px;
  border-radius: 12px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  width: 100%;
  max-width: 400px;
  margin: 20px;
}

/* Home page specific */
.home-hero {
  padding: 80px 0 60px;
  text-align: center;
  background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
}

/* ================================= */
/* Utility Classes for Quick Fixes */

/* Quick fix classes you can add to any container */
.navbar-offset {
  margin-top: 80px;
}

.navbar-padding {
  padding-top: 80px;
}

.full-height-minus-navbar {
  min-height: calc(100vh - 80px);
}

.center-content {
  display: flex;
  align-items: center;
  justify-content: center;
}

/* ================================= */
/* Responsive Adjustments */

@media (max-width: 768px) {
  /* Adjust for mobile navbar height if different */
  .page-wrapper,
  .navbar-offset {
    margin-top: 60px; /* Mobile navbar height */
  }
  
  .full-height-minus-navbar {
    min-height: calc(100vh - 60px);
  }
  
  .auth-container {
    margin: 10px;
    padding: 30px 20px;
  }
  
  .home-hero {
    padding: 40px 0 30px;
  }
}

/* ================================= */
/* Animation for smooth transitions */
.page-wrapper {
  transition: margin-top 0.3s ease;
}

/* For pages that slide in */
.page-enter {
  opacity: 0;
  transform: translateY(20px);
}

.page-enter-active {
  opacity: 1;
  transform: translateY(0);
  transition: opacity 0.3s ease, transform 0.3s ease;
}
